# Nginx 安全加固配置
# 企业级安全设置和防护措施

user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # 基本安全设置
    server_tokens off;
    more_clear_headers 'Server';
    more_clear_headers 'X-Powered-By';
    
    # 安全头设置
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # 隐藏Nginx版本
    server_tokens off;

    # 日志格式
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '"$http_x_forwarded_for" "$request_time" '
                       '"$upstream_response_time"';

    access_log /var/log/nginx/access.log security;

    # 性能和安全优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 15;
    types_hash_max_size 2048;
    client_max_body_size 1m;
    client_body_timeout 10;
    client_header_timeout 10;
    send_timeout 10;

    # 限制请求大小
    large_client_header_buffers 2 1k;
    client_body_buffer_size 1k;
    client_header_buffer_size 1k;

    # 压缩设置
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 限制连接数和请求频率
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;
    limit_req_zone $server_name zone=req_limit_per_server:10m rate=100r/s;

    # 地理位置限制（示例）
    geo $allowed_country {
        default 0;
        # 允许的国家/地区IP段
        127.0.0.0/8 1;      # localhost
        10.0.0.0/8 1;       # private
        172.16.0.0/12 1;    # private
        192.168.0.0/16 1;   # private
    }

    # IP白名单映射
    geo $whitelist {
        default 0;
        127.0.0.1 1;
        # 添加受信任的IP地址
    }

    # 恶意请求检测
    map $http_user_agent $blocked_agent {
        default 0;
        ~*malicious 1;
        ~*attack 1;
        ~*hack 1;
        ~*bot 1;
        ~*scanner 1;
    }

    # DDoS保护
    map $http_x_forwarded_for $realip {
        default $remote_addr;
        ~^(\d+\.\d+\.\d+\.\d+) $1;
    }

    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;

        # 基本安全限制
        limit_conn conn_limit_per_ip 10;
        limit_req zone=req_limit_per_ip burst=10 nodelay;

        # 阻止恶意User-Agent
        if ($blocked_agent) {
            return 403;
        }

        # 阻止空User-Agent
        if ($http_user_agent = "") {
            return 403;
        }

        # 阻止某些HTTP方法
        if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$ ) {
            return 405;
        }

        # 防止目录遍历攻击
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 防止访问敏感文件
        location ~* \.(env|config|ini|log|bak|backup|sql|dump|tar|gz|zip)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 防止访问版本控制文件
        location ~ /\.(git|svn|hg) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # 限制文件上传
        location /upload {
            deny all;
        }

        # Clash配置文件访问 - 带认证
        location = /config.yaml {
            # 限制访问频率
            limit_req zone=req_limit_per_ip burst=2 nodelay;
            
            # IP白名单检查
            if ($whitelist = 0) {
                return 403;
            }
            
            alias /usr/share/nginx/clash-config/config.yaml;
            add_header Content-Type "text/yaml; charset=utf-8";
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            
            # CORS 限制
            add_header Access-Control-Allow-Origin "https://clash.razord.top";
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Content-Type";
        }

        # API 代理 - 增强安全
        location /api/ {
            # 限制访问频率
            limit_req zone=req_limit_per_ip burst=20 nodelay;
            
            # 检查认证头
            if ($http_authorization = "") {
                return 401;
            }
            
            proxy_pass http://clash-test:19090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 安全的代理设置
            proxy_hide_header X-Powered-By;
            proxy_hide_header Server;
            
            # 超时设置
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 30s;
            
            # 缓冲设置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # WebSocket支持
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # 管理界面 - 基本认证
        location /dashboard/ {
            # 限制访问频率
            limit_req zone=req_limit_per_ip burst=5 nodelay;
            
            # IP白名单
            if ($whitelist = 0) {
                return 403;
            }
            
            # 基本认证
            auth_basic "Clash Dashboard";
            auth_basic_user_file /etc/nginx/htpasswd;
            
            try_files $uri $uri/ /dashboard/index.html;
        }

        # 健康检查端点
        location = /health {
            access_log off;
            add_header Content-Type "application/json";
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","server":"$hostname"}';
        }

        # 安全信息端点
        location = /security-info {
            access_log off;
            add_header Content-Type "application/json";
            return 200 '{"security_headers":true,"rate_limiting":true,"ip_filtering":true}';
        }

        # 默认拒绝未匹配的请求
        location / {
            try_files $uri $uri/ =404;
        }

        # 错误页面
        error_page 404 /404.html;
        error_page 403 /403.html;
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            internal;
            add_header Content-Type "text/html";
            return 404 '<html><body><h1>404 Not Found</h1></body></html>';
        }

        location = /403.html {
            internal;
            add_header Content-Type "text/html";
            return 403 '<html><body><h1>403 Forbidden</h1></body></html>';
        }

        location = /50x.html {
            internal;
            add_header Content-Type "text/html";
            return 500 '<html><body><h1>500 Internal Server Error</h1></body></html>';
        }
    }
}