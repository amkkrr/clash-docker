# 安全加固的 Docker Compose 配置
# 实施最小权限原则和安全最佳实践

services:
  # 配置生成器 - 安全版本
  config-generator:
    build:
      context: ..
      dockerfile: dockerfiles/Dockerfile.config-generator
    container_name: clash-config-generator-secure
    volumes:
      - .:/workspace:ro  # 只读挂载
      - ./config:/workspace/config:rw  # 配置目录可写
      - ./test-suite/temp:/tmp/clash-temp:rw
    working_dir: /workspace
    environment:
      - ENVIRONMENT=production
    env_file:
      - .env
    user: "1000:1000"  # 非root用户
    read_only: true  # 只读根文件系统
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
    command: ["generate", ".env"]
    environment:
      - CONFIG_READY_FLAG=/tmp/clash-temp/config-ready.flag
    networks:
      - clash-secure-network
    restart: "no"
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 32M

  # Clash 核心服务 - 安全版本
  clash:
    image: dreamacro/clash:v1.18.0
    container_name: clash-secure
    restart: unless-stopped
    ports:
      - "127.0.0.1:${CLASH_HTTP_PORT:-7890}:${CLASH_HTTP_PORT:-7890}"  # 绑定到localhost
      - "127.0.0.1:${CLASH_SOCKS_PORT:-7891}:${CLASH_SOCKS_PORT:-7891}"
      - "127.0.0.1:${CLASH_CONTROL_PORT:-9090}:${CLASH_CONTROL_PORT:-9090}"
    environment:
      - CLASH_SECRET=${CLASH_SECRET}
      - CLASH_LOG_LEVEL=${CLASH_LOG_LEVEL:-warn}
    volumes:
      - ./config:/root/.config/clash:ro  # 只读配置
      - ./data:/root/.config/clash/data:rw
      - ./test-suite/temp:/tmp/clash-temp:ro
    networks:
      - clash-secure-network
    user: "1001:1001"  # 非root用户
    read_only: false  # Clash需要写入日志
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - NET_RAW
    sysctls:
      - net.ipv4.ip_unprivileged_port_start=0
    command: >
      sh -c "
        while [ ! -f /tmp/clash-temp/config-ready.flag ]; do
          echo 'Waiting for configuration...' &&
          sleep 2
        done &&
        /clash -d /root/.config/clash -ext-ctl 127.0.0.1:${CLASH_CONTROL_PORT:-9090} -secret ${CLASH_SECRET}
      "
    depends_on:
      config-generator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:${CLASH_CONTROL_PORT:-9090}/version", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Nginx 反向代理 - 安全版本
  nginx:
    image: nginx:1.25.3-alpine
    container_name: clash-nginx-secure
    restart: unless-stopped
    ports:
      - "127.0.0.1:${NGINX_PORT:-8088}:80"  # 绑定到localhost
    volumes:
      - ./security/nginx-security.conf:/etc/nginx/nginx.conf:ro
      - ./config:/usr/share/nginx/clash-config:ro
      - ./html:/usr/share/nginx/html:ro
      - ./security/htpasswd:/etc/nginx/htpasswd:ro
    networks:
      - clash-secure-network
    user: "101:101"  # nginx用户
    read_only: true
    tmpfs:
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m
      - /tmp:noexec,nosuid,size=10m
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - NET_BIND_SERVICE
    depends_on:
      clash:
        condition: service_healthy
      config-generator:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M

  # 安全监控服务
  security-monitor:
    image: alpine:3.18.3
    container_name: clash-security-monitor
    restart: unless-stopped
    volumes:
      - ./security:/app/security:ro
      - ./logs:/app/logs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - clash-secure-network
    user: "1002:1002"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    command: >
      sh -c "
        apk add --no-cache curl docker-cli jq &&
        while true; do
          echo '[$(date)] Security monitoring check' >> /app/logs/security-monitor.log &&
          /app/security/docker-security-scan.sh >> /app/logs/security-monitor.log 2>&1 &&
          sleep 3600
        done
      "
    depends_on:
      - clash
      - nginx
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.01'
          memory: 32M

networks:
  clash-secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: clash-secure-br
      com.docker.network.bridge.enable_icc: "false"  # 禁用容器间通信
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"
    ipam:
      config:
        - subnet: 172.31.0.0/16
          gateway: 172.31.0.1
          ip_range: 172.31.1.0/24
    internal: false
    enable_ipv6: false
    labels:
      - "security.level=high"
      - "environment=production"

volumes:
  clash-secure-config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./config
  clash-secure-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data

# 安全标签
x-security-labels: &security-labels
  - "security.scan=enabled"
  - "security.level=high"
  - "compliance.required=true"