name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 代码质量和安全检查
  code-quality:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        scandir: './scripts'
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 配置验证测试
  config-validation:
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment file for testing
      run: |
        cp .env.example .env
        # 使用测试值替换关键变量
        sed -i 's/your_clash_secret_here/test_secret_12345/g' .env
        sed -i 's/your_vless_uuid/12345678-1234-1234-1234-123456789abc/g' .env
        sed -i 's/your_vmess_uuid/87654321-4321-4321-4321-cba987654321/g' .env
        
    - name: Validate environment variables
      run: |
        chmod +x scripts/validate-env.sh
        ./scripts/validate-env.sh .env
        
    - name: Test configuration generation
      run: |
        chmod +x scripts/debug-config.sh
        ./scripts/debug-config.sh test .env

  # Docker镜像构建和测试
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality, config-validation]
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-config-generator
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push config-generator image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./dockerfiles/Dockerfile.config-generator
        platforms: ${{ matrix.platform }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Docker security scan
      run: |
        chmod +x security/docker-security-scan.sh
        ./security/docker-security-scan.sh || true
        
    - name: Scan config-generator image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-config-generator:latest
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # 集成测试
  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup environment file
      run: |
        cp .env.example .env
        sed -i 's/your_clash_secret_here/test_secret_12345/g' .env
        sed -i 's/your_vless_uuid/12345678-1234-1234-1234-123456789abc/g' .env
        sed -i 's/your_vmess_uuid/87654321-4321-4321-4321-cba987654321/g' .env
        
    - name: Build and test services
      run: |
        docker compose build
        docker compose up -d config-generator
        sleep 10
        docker compose logs config-generator
        
    - name: Verify configuration generation
      run: |
        if [ -f "config/config.yaml" ]; then
          echo "Configuration generated successfully"
          head -20 config/config.yaml
        else
          echo "Configuration generation failed"
          exit 1
        fi
        
    - name: Cleanup
      if: always()
      run: |
        docker compose down -v
        docker system prune -f

  # 部署到测试环境（仅在主分支）
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan, integration-test]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "部署到测试环境的逻辑"
        echo "可以在这里添加具体的部署脚本"
        
  # 创建发布（仅在发布标签时）
  create-release:
    runs-on: ubuntu-latest
    needs: [security-scan, integration-test]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create release artifacts
      run: |
        mkdir -p release-artifacts
        cp -r docs/ release-artifacts/
        cp README.md release-artifacts/
        cp .env.example release-artifacts/
        tar -czf clash-docker-${{ github.event.release.tag_name }}.tar.gz release-artifacts/
        
    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./clash-docker-${{ github.event.release.tag_name }}.tar.gz
        asset_name: clash-docker-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip